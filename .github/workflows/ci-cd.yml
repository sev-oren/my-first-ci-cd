name: CI/CD Pipeline with SAST
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    # Шаг 1: Получаем код из репозитория
    - name: Checkout code
      uses: actions/checkout@v4
    # Шаг 2: Настраиваем окружение Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    # Шаг 3: Устанавливаем зависимости
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest bandit flake8 jq
    # Шаг 4: Проверка стиля кода с помощью flake8
    - name: Run flake8
      run: |  
        flake8 . --exclude=.venv,venv,__pycache__,build,dist
    # Шаг 5: Запускаем SAST-сканер (Bandit) - ЗАВЕДОМО ПАДАЮЩАЯ ПРОВЕРКА
    - name: Run Bandit SAST Scan
      run: |
        # Создаем файл с заведомо проблемным кодом для теста
        cat > test_vulnerable.py << 'EOF'
        import os
        import subprocess
        # Уязвимый код для демонстрации
        def vulnerable_function(user_input):
            # Использование shell=True с пользовательским вводом
            subprocess.call(f"echo {user_input}", shell=True)
            # Hardcoded password
            password = "secret123"
            # Использование устаревшей функции
            result = os.popen(f"ls {user_input}").read()
            return result
        EOF
        # Запускаем bandit который найдет уязвимости
        bandit -r . --severity-level high --confidence-level high -f json -o bandit_results.json
    # Шаг 6: Сохраняем результат Bandit как артефакт
    - name: Upload Bandit Results
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: bandit_results.json
    # Шаг 7: Анализируем отчет Bandit - ЗАВЕДОМО ПАДАЮЩАЯ ПРОВЕРКА
    - name: Check Bandit Results
      id: bandit-check
      run: |
        if [ -f bandit_results.json ]; then
          echo "Checking Bandit results..."
          echo "Bandit found critical security vulnerabilities! Failing the pipeline."
          echo "View bandit_results.json artifact for details."
          exit 1  # Фейлим пайплайн принудительно
        else
          echo "Bandit report not found."
          exit 1
        fi
    # Шаг 8: Запускаем unit-тесты
    - name: Run Tests with pytest
      run: |
        python -m pytest tests/ -v || echo "Tests completed"
  # ДОБАВЛЕНО: Новый job для сборки, который запускается только после успешного security-scan
  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: security-scan # запускать только после успешного выполнения security-scan
    steps:
      # Шаг 1: Получаем код
      - name: Checkout code
        uses: actions/checkout@v4
      # Шаг 2: Настраиваем окружение Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      # Шаг 3: Выполняем сборку проекта
      - name: Build project
        run: |
          echo "Building project..."
          echo "This message should not appear if security-scan failed!"
          # пример для Python-проекта:
          # python setup.py sdist bdist_wheel
          # или для современных проектов:
          # pip install build
          # python -m build
